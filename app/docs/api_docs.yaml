openapi: 3.0.3
info:
  title: Desafio final arquitetura de software
  description: |-
    Exemplo de servidor web que implementa as seguintes operações para um base de clientes:
      
        Criação (Create), Leitura (Read), Atualização (Update) e Exclusão
        
        Contagem do número total de registros
        
        Obtenção de todos os registros
        
        Obtenção de um registro específico por ID
        
        Obtenção de todos os registros com um determinado nome
        
  contact:
    email: rodrigobsnunes@gmail.com
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: clientes
    description: Informações acerca de clientes
paths:
  /v1/clientes:
    get:
      tags:
        - clientes
      summary: Lista todos os clientes
      description: Lista todos os clientes existentes na base de dados
      operationId: listar_todos
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cliente' 
    post:
      tags:
        - clientes
      summary: Adiciona um novo cliente a base de dados
      description: Adiciona um novo cliente a base de dados
      operationId: salvar_via_json
      requestBody:
        description: Cria um novo cliente na base de dados
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClienteInsert'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'          
        # '400':
        #   description: Inputs inválidos
        # '422':
        #   description: Exceção na validação dos dados
    
    put:
      tags:
        - clientes
      summary: Atualiza um cliente existente
      description: Atualiza um cliente existente
      operationId: atualizar_via_json
      requestBody:
        description: Atualiza um cliente na base de dados
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cliente'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'          
        # '400':
        #   description: Fornecido ID inválido
        '404':
          description: Cliente não encontrado
        # '422':
        #   description: Exceção na validação dos dados
  
  /v1/clientes/{id}:
    get:
      tags:
        - clientes
      summary: Encontra um cliente pelo ID
      description: Returna um único cliente
      operationId: buscar_por_id
      parameters:
        - name: id
          in: path
          description: Id do cliente a ser obtido
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operação bem sucedida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'     
        # '400':
        #   description: ID inválido fornecido
        '404':
          description: Cliente não encontrado

    delete:
      tags:
        - clientes
      summary: Deleta um cliente
      description: Deleta um cliente da base de dados
      operationId: deletar_por_id
      parameters:
        - name: id
          in: path
          description: Id do cliente a ser deletado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operação bem sucedida
        '400':
          description: ID inválido fornecido
        '404':
          description: Cliente não encontrado
    post:
      tags:
        - clientes
      summary: atualiza um cliente via form
      description: Atualiza um cliente via form
      operationId: atualizar_via_form
      parameters:
        - name: id
          in: path
          description: Id do cliente a ser atualizado
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                nome: 
                  type: string
                email: 
                  type: string
              required:
                - nome
                - email
      responses:
        '200':
          description: Operação bem sucedida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'     
        # '400':
        #   description: ID inválido fornecido
        '404':
          description: Cliente não encontrado    
  /v1/clientes/delete_form:
    post:
      tags:
        - clientes
      summary: Deleta um cliente na base de dados usando formulário html
      description: 'Deleta um cliente usando formulário html'
      operationId: deletar_via_form
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id: 
                  type: int
              required:
                - id
      responses:
        '200':
          description: Operação bem sucedida
        # '400':
        #   description: ID inválido fornecido
        '404':
          description: Cliente com ID não encontrado

  /v1/clientes/insert_form:
    post:
      tags:
        - clientes
      summary: Adiciona um cliente a base de dados usando formulário html
      description: 'Adiciona um cliente usando formulário html'
      operationId: salvar_via_form
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                nome: 
                  type: string
                email: 
                  type: string
              required:
                - nome
                - email
      responses:
        '200':
          description: Operação bem sucedida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
        '400':
          description: ID inválido fornecido
        '404':
          description: Cliente não encontrado

  /v1/clientes/contar:
    get:
      tags:
        - clientes
      summary: Fornece a contagem de clientes existentes na base de dados
      description: 'Fornece a contagem de clientes existentes na base de dados'
      operationId: contar_clientes
      responses:
        '200':
          description: Operação bem sucedida
          content:
            application/json:
              schema:
                type: integer
                format: int64
  
  /v1/clientes/nome/{nome}:
    get:
      tags:
        - clientes
      summary: Encontra todos os clientes que detem um certo nome
      description: Returna uma lista de clientes com o nome fornecido
      operationId: buscar_por_nome
      parameters:
        - name: nome
          in: path
          description: Nome dos clientes a serem retornados
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operação bem sucedida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cliente'
          
components:
  schemas:
    Cliente:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        nome:
          type: string
          description: nome do cliente
          example: Rodrigo
        email:
          type: string
          description: email do cliente
          example: rodrigo@gmail.com

    ClienteInsert:
      type: object
      properties:
        nome:
          type: string
          description: nome do cliente
          example: Rodrigo
        email:
          type: string
          description: email do cliente
          example: rodrigo@gmail.com

  requestBodies:
    Cliente:
      description: Objeto cliente a ser adicionado a base de dados
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Cliente'

